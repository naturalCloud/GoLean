// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChooseClient is the client API for Choose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChooseClient interface {
	BestChoose(ctx context.Context, in *Boy, opts ...grpc.CallOption) (*Girl, error)
}

type chooseClient struct {
	cc grpc.ClientConnInterface
}

func NewChooseClient(cc grpc.ClientConnInterface) ChooseClient {
	return &chooseClient{cc}
}

func (c *chooseClient) BestChoose(ctx context.Context, in *Boy, opts ...grpc.CallOption) (*Girl, error) {
	out := new(Girl)
	err := c.cc.Invoke(ctx, "/pb.Choose/bestChoose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChooseServer is the server API for Choose service.
// All implementations must embed UnimplementedChooseServer
// for forward compatibility
type ChooseServer interface {
	BestChoose(context.Context, *Boy) (*Girl, error)
	mustEmbedUnimplementedChooseServer()
}

// UnimplementedChooseServer must be embedded to have forward compatible implementations.
type UnimplementedChooseServer struct {
}

func (UnimplementedChooseServer) BestChoose(context.Context, *Boy) (*Girl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestChoose not implemented")
}
func (UnimplementedChooseServer) mustEmbedUnimplementedChooseServer() {}

// UnsafeChooseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChooseServer will
// result in compilation errors.
type UnsafeChooseServer interface {
	mustEmbedUnimplementedChooseServer()
}

func RegisterChooseServer(s grpc.ServiceRegistrar, srv ChooseServer) {
	s.RegisterService(&Choose_ServiceDesc, srv)
}

func _Choose_BestChoose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChooseServer).BestChoose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Choose/bestChoose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChooseServer).BestChoose(ctx, req.(*Boy))
	}
	return interceptor(ctx, in, info, handler)
}

// Choose_ServiceDesc is the grpc.ServiceDesc for Choose service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Choose_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Choose",
	HandlerType: (*ChooseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bestChoose",
			Handler:    _Choose_BestChoose_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneof.proto",
}
