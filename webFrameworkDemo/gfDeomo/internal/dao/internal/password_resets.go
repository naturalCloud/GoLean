// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// PasswordResetsDao is the data access object for table password_resets.
type PasswordResetsDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns PasswordResetsColumns // columns contains all the column names of Table for convenient usage.
}

// PasswordResetsColumns defines and stores column names for table password_resets.
type PasswordResetsColumns struct {
	Email     string //
	Token     string //
	CreatedAt string //
}

//  passwordResetsColumns holds the columns for table password_resets.
var passwordResetsColumns = PasswordResetsColumns{
	Email:     "email",
	Token:     "token",
	CreatedAt: "created_at",
}

// NewPasswordResetsDao creates and returns a new DAO object for table data access.
func NewPasswordResetsDao() *PasswordResetsDao {
	return &PasswordResetsDao{
		group:   "default",
		table:   "password_resets",
		columns: passwordResetsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PasswordResetsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *PasswordResetsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *PasswordResetsDao) Columns() PasswordResetsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *PasswordResetsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PasswordResetsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PasswordResetsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
